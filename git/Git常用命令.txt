or create a new repository on the command line
一、基础配置
    1、下面演示一下git的基本操作，高级功能可以自行查阅文档。
        演示账号：liguibing
        密码：xxxx
        git检出地址：liguibing@123.57.224.16:/mnt/git/nbfy_pc_www.git

2、电脑上第一次使用咱们的代码库时需要配置一下个人信息，如下（必须配置）：
        git config --global user.name "liguibing"
        git config --global user.email "liguibing@nbfanyi.com"


二、检出代码 
    1、查看分支名称列表(clone之后执行)：
        git branch -r

    2.0、检出代码(master分支)：
        git clone liguibing@123.57.224.16:/mnt/git/nbfy_pc_www.git master

    2.1、检出代码(liguibing_user_photo分支)：
        git clone liguibing@123.57.224.16:/mnt/git/nbfy_pc_www.git liguibing_user_photo

三、同步线上代码到本地
   #更新代码，主要是让代码保持最新的代码，分别操作：更新代码、查看状态、最近更新人
        git pull
        git status 
        git log

    #切换当前分支到：liguibing_user_test：
            git checkout liguibng_user_test

     #查看当前所在分支：
           git branch

        注意：每次修改代码之前一定要更新(git pull)一下，否则容易产生冲突或覆盖别人的代码。

四、修改提交代码 
    1、查看状态，看看那些文件被修改了，那些文件是新增的(需要进入刚刚clone的项目中)：
        git status

    2、查看最近提交记录：
        git log

    3、添加修改、添加的文件：
        #单个文件逐步添加
            git add xxx.java 
            git add man.java 

        #添加所有改动的文件：
            git add  .  或者使用  git add -a

    4、提交文件：
        git commit -m "本次修改的备注，如修改了用户头像不展示问题"

    5、推送的远程仓库分支：
        #将代码推送到 liguibing_user_photo 分支，可以把 liguibing_user_photo 换成你想要推送的任何分支
        git push -u origin liguibing_user_photo

        #注意：禁止将代码直接推送到master主干上，只能推送到分支。

五、创建分支
    #创建一个liguibing_pc_help的分支：
        git checkout -b liguibing_pc_help

    #切分支，从当前分支切换到 liguibing_pc_help
        git checkout liguibing_pc_help

    #将新分支(liguibing_pc_help)推送到远程服务器：
        git push origin liguibing_pc_help


六、分支合并
    1、将当期分支合并到master，也可以合并到指定的分支：
        git branch
        git pull 
        git checkout master

    #将liguibing_pc_help分支合并到master分支：
        git checkout master
        git merge liguibing_pc_help

    #合并后推送到原创服务器
        git push -u origin master







===========================================================================
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin git@github.com:lyb411/book.git
git push -u origin master
…or push an existing repository from the command line


git remote add origin git@github.com:lyb411/book.git
git push -u origin master

#git remote rm origin


Git 是一个很强大的分布式版本控制系统。它不但适用于管理大型开源软件的源代码，管理私人的文档和源代码也有很多优势。
Git常用操作命令：
1) 远程仓库相关命令
检出仓库：$ git clone git://github.com/jquery/jquery.git
查看远程仓库：$ git remote -v
添加远程仓库：$ git remote add [name] [url]
删除远程仓库：$ git remote rm [name]
修改远程仓库：$ git remote set-url –push [name] [newUrl]
拉取远程仓库：$ git pull [remoteName] [localBranchName]
推送远程仓库：$ git push [remoteName] [localBranchName]

*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：
$git push origin test:master // 提交本地test分支作为远程的master分支
$git push origin test:test // 提交本地test分支作为远程的test分支

2）分支(branch)操作相关命令
查看本地分支：$ git branch
查看远程分支：$ git branch -r
创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支
切换分支：$ git checkout [name]
创建新分支并立即切换到新分支：$ git checkout -b [name]
删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项
合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并
创建远程分支(本地分支push到远程)：$ git push origin [name]
删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name]

*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)
$git symbolic-ref HEAD refs/heads/[name]
$rm .git/index
$git clean -fdx

3）版本(tag)操作相关命令
查看版本：$ git tag
创建版本：$ git tag [name]
删除版本：$ git tag -d [name]
查看远程版本：$ git tag -r
创建远程版本(本地版本push到远程)：$ git push origin [name]
删除远程版本：$ git push origin :refs/tags/[name]
合并远程仓库的tag到本地：$ git pull origin –tags
上传本地tag到远程仓库：$ git push origin –tags
创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’

4) 子模块(submodule)相关操作命令
添加子模块：$ git submodule add [url] [path]
如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs
初始化子模块：$ git submodule init —-只在首次检出仓库时运行一次就行
更新子模块：$ git submodule update —-每次更新或切换分支后都需要运行一下
删除子模块：（分4步走哦）
1) $ git rm –cached [path]
2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉
3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉
4) 手动删除子模块残留的目录

5）忽略一些文件、文件夹不提交
在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如
target
bin
*.db

=====================
Git 常用命令
git branch 查看本地所有分支
git status 查看当前状态
git commit 提交
git branch -a 查看所有的分支
git branch -r 查看本地所有分支
git commit -am “init” 提交并且加注释
git remote add origin git@192.168.1.119:ndshow
git push origin master 将文件给推到服务器上
git remote show origin 显示远程库origin里的资源
git push origin master:develop
git push origin master:hb-dev 将本地库与服务器上的库进行关联
git checkout –track origin/dev 切换到远程dev分支
git branch -D master develop 删除本地库develop
git checkout -b dev 建立一个新的本地分支dev
git merge origin/dev 将分支dev与当前分支进行合并
git checkout dev 切换到本地dev分支
git remote show 查看远程库
git add .
git rm 文件名(包括路径) 从git中删除指定文件
git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来
git config –list 看所有用户
git ls-files 看已经被提交的
git rm [file name] 删除一个文件
git commit -a 提交当前repos的所有的改变
git add [file name] 添加一个文件到git index
git commit -v 当你用－v参数的时候可以看commit的差异
git commit -m “This is the message describing the commit” 添加commit信息
git commit -a -a是代表add，把所有的change加到git index里然后再commit
git commit -a -v 一般提交命令
git log 看你commit的日志
git diff 查看尚未暂存的更新
git rm a.a 移除文件(从暂存区和工作区中删除)
git rm –cached a.a 移除文件(只从暂存区中删除)
git commit -m “remove” 移除文件(从Git中删除)
git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)
git diff –cached 或 $ git diff –staged 查看尚未提交的更新
git stash push 将文件给push到一个临时空间中
git stash pop 将文件从临时空间pop下来
———————————————————
git remote add origin git@github.com:username/Hello-World.git
git push origin master 将本地项目给提交到服务器中
———————————————————–
git pull 本地与服务器端同步
—————————————————————–
git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。
git push origin serverfix:awesomebranch
——————————————————————
git fetch 相当于是从远程获取最新版本到本地，不会自动merge
git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：
git branch branch_0.1 master 从主分支master创建branch_0.1分支
git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0
git checkout branch_1.0/master 切换到branch_1.0/master分支
du -hs

———————————————————–
mkdir WebApp
cd WebApp
git init
touch README
git add README
git commit -m ‘first commit’
git remote add origin git@github.com:daixu/WebApp.git
git push -u origin master
